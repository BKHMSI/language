### 
# Triggered on all PRs either by
# - completion of CI checks, or
# - tagging with label
# If PR is labeled "automerge", checks if Travis tests pass. If yes, THEN:
# Checks if PR modifies any code outside plugin dirs.
# If no changes are made outside a subdir of /benchmarks, /data, /models, or /metrics,
# and the PR is labeled with the "automerge" tag,
# the PR is automatically approved and merged.
# If changes are made to a subdir of /benchmarks or /models,
# and an email can be found for the PR author,
# PR is merged to main.
### 

name: Automatically merge plugin-only PRs

on:
  check_run:
    types: [completed]
  pull_request:
    types: [labeled]

permissions: write-all

jobs:
  isautomerge:
    name: Check if PR is labeled with 'automerge' # All auto-generated PRs from website submission are tagged with this label 
    runs-on: ubuntu-latest
    if: contains( github.event.pull_request.labels.*.name, 'automerge')
    outputs:
      AUTOMERGE: ${{ steps.checklabel.outputs.AUTOMERGE }}
    steps:
      -id: checklabel
      run: |
        echo "::set-output name=AUTOMERGE::'True'"

  travissuccess:
    name: Check if Travis build is successful
    runs-on: ubuntu-latest
    if: ${{ needs.isautomerge.outputs.AUTOMERGE == 'True' }}
    outputs:
      TRAVIS_OK: ${{ steps.istravisok.outputs.TRAVIS_OK }}
    steps:
      - id: gettravisstatus
        run: |
          echo "TRAVIS_CONCLUSION=$(curl -X GET https://api.github.com/repos/brain-score/language/commits/${GITHUB_SHA}/check-runs | python -c "import sys,json; print(json.load(sys.stdin)['check_runs'][0]['conclusion'])")" >> $GITHUB_ENV
      - id: istravisok
        run: |
          if [ "$TRAVIS_CONCLUSION" == "success" ]
          then
              travisok='True'
          else
              travisok='False'
          fi
          echo "::set-output name=TRAVIS_OK::$travisok"

  checkchanges:
    name: Check 1) if PR only changes plugin files; 2) if scoring is needed
    runs-on: ubuntu-latest
    needs: travis_success
    if: ${{ needs.travissuccess.outputs.TRAVIS_OK == 'True' }}
    outputs:
      PLUGIN_INFO: ${{ steps.getpluginfo.outputs.PLUGIN_INFO }}
      IS_PLUGIN_ONLY: ${{ steps.ispluginonly.outputs.IS_PLUGIN_ONLY }}
      RUN_SCORE: ${{ steps.runscore.outputs.RUN_SCORE }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Get changed files
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          list-files: shell
          filters: |
            changed:
              - '**'
      - name: Save changed files to env var
        run: echo "CHANGED_FILES=${{ steps.filter.outputs.changed_files }}" >> $GITHUB_ENV
      
      - name: Parse changed files with python script
        run: |
          echo "PLUGIN_INFO=$(python .github/workflows/parse_changed_files.py '${{ env.CHANGED_FILES }}')" >> $GITHUB_ENV
          
      - name: Save plugin info to outputs
        id: getpluginfo
        run: |
          echo "PLUGIN_INFO=$PLUGIN_INFO" >> $GITHUB_OUTPUT

      - name: check if plugin-only
        id: ispluginonly
        run: |
          echo "IS_PLUGIN_ONLY=$(jq -r '.is_plugin_only' <<< "$PLUGIN_INFO")" >> $GITHUB_OUTPUT

      - name: check if scoring needed
        id: runscore
        run: |
          echo "RUN_SCORE=$(jq -r '.run_score' <<< "$PLUGIN_INFO")" >> $GITHUB_OUTPUT

  get_user_email:
    name: Get the PR author's email from their GitHub username
    runs-on: ubuntu-latest
    needs: checkchanges
    if: ${{ needs.checkchanges.outputs.RUN_SCORE == 'True' }}
    env:
      PLUGIN_INFO: ${{ needs.checkchanges.outputs.PLUGIN_INFO }}
    steps:
      - name: Get email
        id: getemail
        uses: evvanErb/get-github-email-by-username-action@v1.25
        with:
          github-username: ${{github.event.pull_request.user.login}} # This is the input username
          token: ${{ secrets.GITHUB_TOKEN }} # This is an optional input of a PAT to use a more reliable way to get a user's email
      - name: Print the found email
        run: echo "The email is ${{ steps.getemail.outputs.email }}"
      - name: Add email to PLUGIN_INFO
        run: |
          echo "PLUGIN_INFO="$(<<<$PLUGIN_INFO jq '. + {user_id: ${{ steps.getemail.outputs.email }} }')"" >> $GITHUB_ENV

## DO NOT RUN AUTOMERGE WHILE TESTING ##     
  # automerge:
  #   name: If plugin-only, approve and merge
  #   runs-on: ubuntu-latest
  #   needs: checkchanges
  #   if: ${{ needs.checkchanges.outputs.IS_PLUGIN_ONLY == 'True' }}
  #   steps:
  #     - name: Auto Approve
  #       uses: hmarr/auto-approve-action@v3.1.0

  #     - name: Auto Merge
  #       uses: plm9606/automerge_actions@1.2.2
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
