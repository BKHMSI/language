### 
# Runs on all PRs merged to main.
# If changes are made to a subdir of /benchmarks or /models,
# a Jenkins scoring run is triggered.
### 

name: Trigger scoring run

on:
  pull_request:
    branches:
      - main
    types:
      - closed

permissions: write-all

jobs:
  changes_models_or_benchmarks:
    name: Check if PR makes changes to /models or /benchmarks
    runs-on: ubuntu-latest
    outputs:
      PLUGIN_INFO: ${{ steps.getpluginfo.outputs.PLUGIN_INFO }}
      RUN_SCORE: ${{ steps.runscore.outputs.RUN_SCORE }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Get changed files
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          list-files: shell
          filters: |
            changed:
              - '**'
      - name: Save changed files to env var
        run: echo "CHANGED_FILES=${{ steps.filter.outputs.changed_files }}" >> $GITHUB_ENV
      
      - name: Parse changed files with python script
        run: |
          echo "PLUGIN_INFO=$(python .github/workflows/parse_changed_files.py '${{ env.CHANGED_FILES }}')" >> $GITHUB_ENV
          
      - name: Save plugin info to outputs
        id: getpluginfo
        run: |
          echo "PLUGIN_INFO=$PLUGIN_INFO" >> $GITHUB_OUTPUT

      - name: check if scoring needed
        id: runscore
        run: |
          echo "RUN_SCORE=$(jq -r '.run_score' <<< "$PLUGIN_INFO")" >> $GITHUB_OUTPUT

  get_user_email:
    name: Get the PR author's email from their GitHub username
    runs-on: ubuntu-latest
    needs: changes_models_or_benchmarks
    if: ${{ needs.changes_models_or_benchmarks.outputs.RUN_SCORE == 'True' }}
    env:
      PLUGIN_INFO: ${{ needs.changes_models_or_benchmarks.outputs.PLUGIN_INFO }}
    steps:
      - name: Get PR author email
        id: getemail
        uses: evvanErb/get-github-email-by-username-action@v1.25
        with:
          github-username: ${{github.event.pull_request.user.login}} # PR author's username
          token: ${{ secrets.GITHUB_TOKEN }} # Including token enables most reliable way to get a user's email
      - name: Print the found email
        run: echo "The email is ${{ steps.getemail.outputs.email }}"
      - name: Add email to PLUGIN_INFO
        run: |
          echo "PLUGIN_INFO="$(<<<$PLUGIN_INFO jq '. + {author_email: ${{ steps.getemail.outputs.email }} }')"" >> $GITHUB_ENV

  runscore:
    name: Score plugins
    runs-on: ubuntu-latest
    needs: changes_models_or_benchmarks
    if: ${{ needs.changes_models_or_benchmarks.outputs.RUN_SCORE == 'True' }}
    env:
      PLUGIN_INFO: ${{ needs.changes_models_or_benchmarks.outputs.PLUGIN_INFO }}
      JENKINS_USR: ${{ secrets.JENKINS_USR }}
      JENKINS_TOKEN: ${{ secrets.JENKINS_TOKEN }}
      JENKINS_TRIGGER: ${{ secrets.JENKINS_TRIGGER }}
    steps:
      - name: Add public, competition, and model_type to PLUGIN_INFO
        run: |
          echo "PLUGIN_INFO="$(<<<$PLUGIN_INFO jq '. + {public: "True", competition: "None", model_type: "artificialsubject"}')"" >> $GITHUB_ENV

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Build project
        run: |
          python -m pip install "."

      - name: Run scoring
        run: |
          python .github/workflows/call_jenkins.py '${{ env.PLUGIN_INFO }}'
